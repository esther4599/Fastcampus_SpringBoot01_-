
오늘 강의에서 할 일

1. springBoot test 만들기

2. MockMvc 테스트 만들기

=====================================================================

테스트를 만들고자하는 파일에서 command + shift + t
=> test에 해당파일 test를 자동으로 만들어준다. 팝업 창에서 ok 클릭하기.

생성된 test 파일에 아래 주석 작성
@SpringBootTest

import org.junit.jupiter.api.Test; // junit 5
import org.junit.Test; // junit 4

control + shift + r = 실행 (test에서 사용)

intelli j 기본코드 템플릿으로 sout을 지원한다. sout 치고 enter 누르면
System.out.println() 으로 변환됨

방법 1. 해당 test 에 아래와 같은 코드 작성하고 실행.
       System.out.println(helloWorldController.helloWorld());
       출력된 값을 보고 제대로 작성되었는지 확인

방법 2. 해당 test에 아래와 같은 코드 작성 //string boot starter test에 포함된 Assert 이용
       Assertions.assertThat(helloWorldController.helloWorld()).isEqualTo("Hello World");

방법 3. MockMVC test //spring에서 제공하는 class 이용
                //위와 다르게 http 접근을 통해 테스트를 진행 = E2E(End to End)로 테스트

       private MockMvc mockMvc;
            // spring에서 제공하는 class 이용 = MockMvc test. http 유효성 검사 가능
           @Test
           void MockMvcTest() throws Exception {
               // 설정
               mockMvc = MockMvcBuilders.standaloneSetup(helloWorldController).build();

               //실제로 동작하도록 요청
               mockMvc.perform(
                       MockMvcRequestBuilders.get("/api/helloWorld")
               ) //여기까지 작성하고 실행시 test 성공은 뜨지만 내용이 보이지는 않는다.
               .andDo( MockMvcResultHandlers.print() ) //실행 결과가 함께 나타난다.
               /*  아래는 실행 결과의 일부
                   MockHttpServletResponse:
                   Status = 200
                   Error message = null
                   Headers = [Content-Type:"text/plain;charset=ISO-8859-1", Content-Length:"11"]
                   Content type = text/plain;charset=ISO-8859-1
                   Body = Hello World
                   Forwarded URL = null
                   Redirected URL = null
                   Cookies = []
               * */
               .andExpect(MockMvcResultMatchers.status().isOk()) //예외처리 : status가 OK인지 확인
               .andExpect(MockMvcResultMatchers.content().string("Hello World")); //받아온 결과의 body 내용 확인
           }

테스트하는 hello world controller의 get메소드를 post로 바꾸면
방법 1, 2는 오류없이 성공적으로 수행되나 http 통신을 이용하는 방법 3은 실패한다.

=====================================================================
