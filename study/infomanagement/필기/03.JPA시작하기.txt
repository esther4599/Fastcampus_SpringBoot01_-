
JPA 로직 작성하기

1. JPA 의존성 추가하기
기존의 DB query를 사용하지 않고 java를 통해 다룰 수 있도록 만들어졌다.

2. H2 DB 의존성 추가하기

3. Entity 생성 및 테스트하기

=====================================================================

의존성 추가하기 (1&2)

build.gradle 파일 dependency에 아래의 코드 추가

implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
implementation 'com.h2database:h2'

=====================================================================

entity 생성 및 테스트하기 (3)

1. java 하위 패키지에서 domain 패키지 만들기

2. Person class 작성하기 //entity = 데이터를 담는 객체

3. repository 작성하기 //entity에 값을 가져오고 DB에 저장하는 기능을 담당

4. repository test
@SpringBootTest
class PersonRepositoryTest {

    @Autowired
    private PersonRepository personRepository;

    @Test
    void crud(){
        Person person = new Person();

        personRepository.save(person);

        System.out.println(personRepository.findAll()); //전제 데이터를 가지고 오는 함수
    }
}

실행 결과
[com.fastcampus.project02.infomanagement.domain.Person@483f9dcb]

=====================================================================

위의 코드의 문제점 3가지

1. hash 값이 출력된다.
Person -> command + n -> toString 오버라이드
결과 : [Person{id=1, name='null', age=0}]

2. getter setter 만들기 (Person)
    1) person에서 get을 입력하면 자동완성으로 함수를 작성할 수 있다.
    2) command + n -> getter and setter 선택

    Test에 아래의 코드 추가
    person.setName("홍길동");
    person.setAge(20);

    실행결과
    [Person{id=1, name='홍길동', age=20}]

3. 테스트 자동화 => sout 사용안하고 진행하기

   //아래의 코드를 통해 제대로 데이터가 입력되었는지 확인할 수 있다.
   Assertions.assertThat(personList.size() == 1);
   Assertions.assertThat(personList.get(0).getName().equals("홍길동"));
   Assertions.assertThat(personList.get(0).getAge() == 20);

=====================================================================

application.yml => DB에 들어간 데이터 확인하기
resources -> command + n : file -> application.yml

spring:
  jpa:
    show-sql: true

=> 이후 test 실행하면 query 문 보임

=====================================================================

    @Test
    void hashCodeAndEquals(){
        Person person1 = new Person("홍길동", 20, "B");
        Person person2 = new Person("홍길동", 20, "B");

        System.out.println(person1.hashCode()); //1117024013
        System.out.println(person2.hashCode()); //253112801
        System.out.println(person1.equals(person2)); //false

        Map<Person, Integer> map = new HashMap<>();
        map.put(person1, person1.getAge());

        System.out.println(map); //{Person(id=null, name=홍길동, age=20, hobby=null, bloodType=null, birthday=null, job=null)=20}

        // get() = key 값으로 검색해 value 가져오기
        // key = 객체의 hash 값
        System.out.println(map.get(person2)); //null
        System.out.println(map.get(person1)); //20
    }