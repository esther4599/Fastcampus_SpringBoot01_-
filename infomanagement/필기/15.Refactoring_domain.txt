
프로젝트의 목표에 걸맞게 domain 코드를 수정한다.

=====================================================================

1. 1차 수정

1) Birthday
//static을 이용해 생성자를 만드는게 최근 추세
public class Birthday {
    private Integer yearOfBirthday;
    private Integer monthOfBirthday;
    private Integer dayOfBirthday;

    private Birthday(LocalDate birthday){
        this.yearOfBirthday = birthday.getYear();
        this.monthOfBirthday = birthday.getMonthValue();
        this.dayOfBirthday = birthday.getDayOfMonth();
    }

    //나이와 같이 주기적으로 변경되는 값은 알아서계산해 가져오도록 변경한다.
    public int getAge(){
        return LocalDate.now().getYear() - this.yearOfBirthday + 1;
    }

    //생일인지 아닌지 여부를 알려주는 함수
    public boolean isBirthdayToday(){
        return LocalDate.now().equals(LocalDate.of(LocalDate.now().getYear(), monthOfBirthday, dayOfBirthday));
    }

    public static Birthday of(LocalDate birthday){
        return new Birthday(birthday);
    }
}

----------------------------------------------

2) Person
public class Person {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NonNull
    @NotEmpty //String의 경우에는 notEmpty, nullable
    @Column(nullable = false)
    private String name;

    private String hobby;

    @NonNull
    @NotEmpty
    @Column(nullable = false)
    private String bloodType;

    private String address;

    @Valid
    @Embedded
    private Birthday birthday; //예전에는 Date를 사용했지만 현재는 LocalDate를 많이 사용한다.

    private String job;

    @ToString.Exclude
    private String phoneNumber;

    @ColumnDefault("0") //0 = false
    private boolean deleted; //삭제 여부 저장

    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true)
    @ToString.Exclude
    private Block block;

    public void set(PersonDTO personDto){
        if(!StringUtils.isEmpty(personDto.getHobby()))
            this.setHobby(personDto.getHobby());

        if(!StringUtils.isEmpty(personDto.getBloodType()))
            this.setBloodType(personDto.getBloodType());

        if(!StringUtils.isEmpty(personDto.getAddress()))
            this.setAddress(personDto.getAddress());

        if(!StringUtils.isEmpty(personDto.getJob()))
            this.setJob(personDto.getJob());

        if(!StringUtils.isEmpty(personDto.getPhoneNumber()))
            this.setPhoneNumber(personDto.getPhoneNumber());

    }

    //나이와 같이 주기적으로 변경되는 값은 알아서계산해 가져오도록 변경한다.
    //아래에서 Birthday가 null인지 확인하는 이유는 test에서는 birthday 객체를 입력받지 않기 때문이다.
    public Integer getAge(){
        if (this.birthday != null)
            return LocalDate.now().getYear() - this.birthday.getYearOfBirthday() + 1;
        else
            return null;
    }

    //생일인지 아닌지 여부를 알려주는 함수
    public boolean isBirthdayToday(){
        return LocalDate.now().equals(LocalDate.of(this.birthday.getYearOfBirthday(), this.birthday.getMonthOfBirthday(), this.birthday.getDayOfBirthday()));
    }
}

3. data.sql
age 컬럼 삭제. 이에 따른 코드 수정.

=====================================================================

2. 2차 수정색

1) Person
blood_type 삭제

2) data.sql 에서 blood_type 컬럼 삭제
//.sql에서 필요 없는 column을 지우거나 할 때
=> command+f로 검색 -> 검색 후 command+enter = 동시 선택

3) PersonRepository
List<Person> findByBloodType(String bloodType); 삭제

-오류 수정
compile -> test -> runTime

----------------------------------------------

1) Person
@ToString.Exclude //이 코드 삭제
private String phoneNumber;

private Block block; //이 코드 삭제

2) data.sql
block 정보 모두 삭제

3) Block entity 삭제

4) blockRepository, blockRepositoryTest 삭제

5) personRepository
List<Person> findByBlockIsNull(); 삭제

6) PersonService 아래 함수 삭제
public List<Person> getPeopleExcludeBlocks() {
    return personRepository.findByBlockIsNull();
}

7) 테스트에서 연관된 함수들 알아서 삭제하기.

8) hello.http, testdata.json 삭제하기

-----------------------------------------------------

1) PersonDTO 수정하기
bloodType과 age 삭제하기

2) Person => personDTO의 birthday를 복사하는 로직 추가하기
public void set(PersonDTO personDto){
    if(!StringUtils.isEmpty(personDto.getHobby()))
        this.setHobby(personDto.getHobby());

    if(!StringUtils.isEmpty(personDto.getAddress()))
        this.setAddress(personDto.getAddress());

    if(!StringUtils.isEmpty(personDto.getJob()))
        this.setJob(personDto.getJob());

    if(!StringUtils.isEmpty(personDto.getPhoneNumber()))
        this.setPhoneNumber(personDto.getPhoneNumber());

    아래 코드가 추가됨
    if(personDto.getBirthday() != null) {
        this.setBirthday(Birthday.of(personDto.getBirthday()));
    }
}

=====================================================================

지금 test 코드에는 문제가 있다.
header에 대한 검증이 있을뿐 데이터에 대한 검증이 없다.

-personControllerTest
@Test
void modifyName() throws Exception {
    mockMvc.perform(
            MockMvcRequestBuilders.patch("/api/person/1")
            .param("name", "martin2"))
            .andDo(print())
            .andExpect(status().isOk()); //header의 status 확인
}

=> 다음 강의에서 수정할 내용